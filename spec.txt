
a = A
b = X 
c = Y 
d = 0 
e = arg 
hl = stack  
a' = cycles left(negative)
de' = temp
c' = carry 
b' = P (V flag stored in bit 6) 
hl' = temp
I = N,Z flags 
sps = event stack

R(b7) = active video flags (enables render logic)

iy = zp ptr / code ptr for interpreter
ix = mem ptr 


if a write could cause a bankswap, do the following: 
	end the block immediately after the write 
	if the write DOES cause a bankswap, force a reload by saving a', setting R(7), then setting a' to 0 (to force scanline ret)




; generic 
	ex af,af'
	ld hl,address
	ld e,c 
	add hl,de 
	ex af,af' 
	call read_byte OR ex de,hl / call func  
	
; skip read_byte dispatch if function for H is the same for H+1 (or L = 0)

; ram access optimization (common case) 
; 40 cycles vs 90+ generic 
	ex af,af' 
	ld hl,translated_address
	ld e,c 
	add hl,de 
	ex af,af' 
	ld e,(hl) 

; slight IO access optimization (high byte ignored) 
	ex af,af' 
	ld l,LOW(address) 
	ld e,c 
	add hl,de 
	ex af,af' 
	call read_io_byte / read_ppu_byte 

; ROM 
	ld ix,(tlb) 
	ex af,af' 
	lea hl,ix+~ 
	ld e,c 
	add hl,de 
	ex af,af' 
	ld e,(hl) 

; 48 cycles 
read_byte: 
	ex de,hl 
	ld hl,read_function_LUT 
	ld l,d 
	ld l,(hl) 
	inc h 
	jp (hl) 
	
worst case line cycles = ~2100 cc 
best case line cycles = ~1200 cc 


tile line format:
	length		1 byte
	tile offset	1 bytes 
	x0..xend	length bytes
	
tile line data: 
	tile#+palette	31x3 
	cache address	31x2

pipeline: 
	during JIT -> generate tile#s 
	during bg draw -> iterate through tile#s, add to cache, flush if necessary
	
	want as many buckets as possible to get close to linear time


; hl = tile# 
; a = tile palette 
tile_search:
	ld b,a			; key = palette<<8|bank 
	ld c,h 
	ld d,l 			; find bucket
	ld e,3 
	mlt de 
	ld hl,tile_bucket 
	add hl,de 
	ld hl,(hl)
.loop:
3	ld sp,hl
15	pop hl 			; compare key to entry 
3	ld a,h 
3	inc a			; if palette = $FF , weve reached the end of the bucket
6	jr z,.notfound
3	or a,a
6	sbc hl,bc 
6	jr z,.found 
15	pop hl 
9	jr .loop 
.found: 
	inc sp
	inc sp
	inc sp 
	pop de
	or a,a 
	jp line_ret 
	
.notfound: 
	; not found in cache, so needs to be added
	scf
	jp line_ret 	

; iy = line data pointer 
; de = start line
drawline:
.start:  
	ld hl,$D3??00 	; load tile y offset
	ld l,(iy+1) 
	ld sp,hl
	ld bc,0	
	exx 
	ld b,(iy+0)
	lea hl,iy+3
.loop:
	ld.sis sp,line_cache_ptrs
	ld a,(hl)
	exx 
	ld e,a 
	ld a,8
repeat 31
16	pop.sis hl	
3	add hl,sp 	
3	ld c,a		
6+	ldir 		
end repeat
	inc d
	ld hl,8 	; +8 to offset
	add hl,sp 
	ld sp,hl
	exx 
	inc hl 
	dec b 
	jp nz,.start	

~2600 cycles per line 


+0 x offset 
+1 y offset 
+2 flags(next tile line?, screen off?)

.loop:
13	ld e,(iy+0) 
3	or a,a 
3	sbc hl,hl 
13	ld l,(iy+1) 
3	ld sp,hl 
21	ld hl,(iy+2) 
6	ld.sis sp,hl 
repeat 31
16	pop.sis hl	
3	add hl,sp 	
3	ld c,a		
6+	ldir 		
end repeat
9	lea iy,iy+4 
3	inc d 
9	jp nz,.loop 
	

; iy = tile data 
; hl = out ptr 
; 
cache_tile:
	exx 
	ld b,4
.yloop:  
2	exx 
10	ld d,(iy+0) 
10	ld e,(iy+8)
2	xor a,a
4	ld b,2 
.loop:  
repeat 4
4	rl d 
2	rla 
4	rl e 
2	rla 
2	or a,c
4	ld (hl),a 
2	inc hl
end repeat  
7/4	djnz loop 
4	inc iy
2	exx 
7/4	djnz .yloop
	exx 
	ret 
	
	
~1800 cc per tile


.loop:
	or a,a 
	sbc hl,hl 
	ex de,hl
	ld e,(iy+0)
	ld d,(iy+1)
	ld c,(iy+2)
	sbc hl,hl 
	add hl,de
	add hl,de
	add hl,de
	ld de,table 
	add hl,de
.search:  	
	ld a,(hl)
	cp a,c
	jr z,.found  
	rla 
	jr c,.cacheTile 
	inc hl 
	ld hl,(hl) 
	jr .search
.found:
	inc hl 
	inc hl 
	inc hl 
	inc hl
	ld hl,(hl)
	push.sis hl
	lea iy,iy-3
	djnz .loop 
.cacheTile:
	call cacheTile
.retpoint:
	jq c,start 	; if cache invalidated
	push.sis hl 
	djnz .loop